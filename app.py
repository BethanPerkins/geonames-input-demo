from flask import Flask, request, render_template
import json
import urllib.request as url
app = Flask(__name__)


def build_geojson(bbox):
    """
    Create a geojson polygon for this bounding box
    :param bbox: Dictionary-based decimal degree bounding box coordinates.
                 Expects keys 'north', ' south', 'east', 'west'
    :return:
    """
    geojson = [{
            'type': 'Feature',
            'geometry': {
                'type': 'Polygon',
                'coordinates': [[
                    [bbox['east'], bbox['north']],
                    [bbox['west'], bbox['north']],
                    [bbox['west'], bbox['south']],
                    [bbox['east'], bbox['south']],
                    [bbox['east'], bbox['north']]
                ]]
            }
        }]

    # return json.dumps(geojson, indent=4)
    return geojson

@app.route('/', methods=['POST', 'GET'])
def geo_locating(user_input_geo="", topten=None,
                 target_json=None, geojson=None):
    """
    Functionality to populate front end

    :param user_input_geo: Location name provided by the user
    :param topten: The top ten results from geonames for the user location name
    :param target_json:  An dummy metadata record, generated by this function
    :param geojson: The geojson record of the bounding box of the selected
    geonames location
    :return: Front end template and variables to populate the template.
    """

    # After hitting first submit. user_input_geo has been created.
    if request.method == 'POST':

        user_input_geo = request.form['user_input_geo'].replace(" ", "%20")

        geonames_response = url.urlopen(
            f"http://api.geonames.org/searchJSON?"
            f"q={user_input_geo}&maxRows=10&username=bethanperkins"
        ).read()

        geonames_data = json.loads(geonames_response)['geonames']

        topten = [f"{g['name']}, {g['countryName']}, "
                  f"{g['adminName1']}: {g['fcodeName']}" for g in geonames_data]

        # Execute the following if specific geonames record has been selected.
        if "target" in request.form:

            # Extract index of the selected result
            idx = int(request.form['target']) - 1

            target_id = geonames_data[idx]['geonameId']

            geonames_metadata_bytes = url.urlopen(
                f"http://api.geonames.org/getJSON?formatted=true&geonameId"
                f"={target_id}&username=bethanperkins&style=full"
            ).read()

            # Convert from bytes to a json dictionary
            geonames_metadata = json.loads(geonames_metadata_bytes)

            geojson = build_geojson(geonames_metadata['bbox'])

            # Construct example metadata entry
            metadata = {
                "geonames_id": geonames_metadata['geonameId'],
                "name": geonames_metadata['name'],
                "geojson": geojson
            }

            target_json = json.dumps(metadata, indent=4)

    return render_template('form.html', region=user_input_geo, topten=topten,
                           target=target_json, geojson=geojson)


if __name__ == '__main__':
    app.run()
